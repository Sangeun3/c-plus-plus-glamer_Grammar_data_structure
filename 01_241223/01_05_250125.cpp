#include <iostream>
using namespace std;

int main() {
	/* 
	
	쉬프트 연산자 : <<, >> 값 대 값을 연산하여 값으로 나오게 된다.
	이 연산자 또한 이진수 단위의 연산을 하게 된다.
	20 << 2 = 80
	20 << 3 = 160
	20 << 4 = 320

	20(10진수)을 2진수로 변환한다.
	10100
	<< 2 : 왼쪽으로 두 칸 이동 1010000 -> 80

	1010000 -> 80 (20의 2승)
	10100000 -> 160 (20의 3승)
	101000000 -> 320 (20의 4승)

	n의 k승을 위해서는 쉬프트 연산자를 쓰면 매우 빠르다. (최적화)

	정수 대 정수 연산 = 정수
	하나라도 실수 연산 = 실수



	20 >> 2 
	= 10100 >> 2 = 101 = 5
	= 20 나누기 2의 2승 = 5

	20 >> 3 
	= 10100 >> 3 = 10 = 2 
	= 20 나누기 2의 3승 = 2.xx
	
	곱하기보다 나누기가 더 오래걸린다.
	곱하기보다 쉬프트연산이 더 빠르다.

	*/



	// 32비트를 16비트 두 개로 나눠서 쓰는법
	// +-------+---------+
	// |  187  |  13560  |
	// +-------+---------+


	int iHigh = 187;
	int iLow = 13560;

	int iNumber = iHigh;

	// iNumber에는 187이 들어가 있다. 
	// 이 값을 <- 이 방향으로 16비트 이동시키면
	// 상위 16비트에 값이 들어가게 된다.
	iNumber <<= 16;

	// 하위 16비트를 채운다.
	iNumber |= iLow;

	// High 값을 출력한다.
	cout << "High : " << (iNumber >> 16); //오른쪽 16비트(13560) 지우기
	cout << "\nLow : " << (iNumber & 0x0000ffff) << endl;
	//0000ffff는 이진수로 0000 0000 0000 0000 1111(=15) 1111 1111 1111
	//따라서 앤드 연산으로 해결

	//증감연산자: ++, -- 가 있다. 1증가, 1감소이다.
	iNumber = 10;

	//전치
	++iNumber;

	//후치
	iNumber++;

	cout << "\n" << ++iNumber << endl; //13
	cout << "\n" << iNumber++ << endl; //13
	cout << "\n" << iNumber << endl; //14

	return 0;

}